import os
import json
import asyncio
import logging
import aiohttp
import zipfile
from io import BytesIO

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import BufferedInputFile, FSInputFile
from aiohttp import web

import gspread
from oauth2client.service_account import ServiceAccountCredentials
import re

import config

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === Google Sheets Auth ===
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]

creds_dict = json.loads(os.environ["GOOGLE_CREDS_JSON"])
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
gc = gspread.authorize(creds)

# –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –ª–∏—Å—Ç
sheet = gc.open(config.SHEET_NAME).worksheet(config.SHEET_TAB_NAME)

# –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–∞–Ω–∞–ª–æ–≤
wanted_pattern = re.compile(
    r'^(?:' + '|'.join(re.escape(name) for name in config.WANTED_CHANNELS) + r')$',
    re.IGNORECASE
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π
playlist_keyboard = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="üì∫ –ü–æ–ª—É—á–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã")]
    ],
    resize_keyboard=True
)

async def is_playlist_valid(content: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
    lines = content.splitlines()
    if not lines or not lines[0].strip().startswith("#EXTM3U"):
        return False
    return any(line.strip().startswith("#EXTINF") for line in lines)

async def process_single_playlist(url: str, session: aiohttp.ClientSession) -> tuple[str, str] | None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
    try:
        async with session.get(url, timeout=15) as resp:
            if resp.status != 200:
                return None
                
            content = await resp.text()
            if not await is_playlist_valid(content):
                return None
                
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤
            valid_entries = []
            lines = content.splitlines()
            
            for i in range(len(lines)):
                if lines[i].startswith("#EXTINF"):
                    title = lines[i].split(",", 1)[-1].strip()
                    if wanted_pattern.match(title):
                        if i+1 < len(lines) and lines[i+1].startswith('http'):
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞
                            try:
                                async with session.head(lines[i+1], timeout=10) as channel_resp:
                                    if channel_resp.status == 200:
                                        valid_entries.extend([lines[i], lines[i+1]])
                            except:
                                continue
                                
            if not valid_entries:
                return None
                
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
            playlist_name = config.PLAYLIST_NAMES.get(url, "default") + ".m3u"
            return playlist_name, "\n".join(["#EXTM3U"] + valid_entries)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {url}: {e}")
        return None

@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "üì° –ë–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö IPTV-–ø–ª–µ–π–ª–∏—Å—Ç–æ–≤\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É",
        reply_markup=playlist_keyboard
    )

@dp.message(F.text == "üì∫ –ü–æ–ª—É—á–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã")
async def handle_playlists(message: types.Message):
    try:
        msg = await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ Google Sheets
        urls = sheet.col_values(2)[1:]
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã
        valid_playlists = []
        async with aiohttp.ClientSession() as session:
            tasks = [process_single_playlist(url.strip(), session) for url in urls if url.strip()]
            results = await asyncio.gather(*tasks)
            
            for result in results:
                if result:
                    valid_playlists.append(result)

        if not valid_playlists:
            return await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤")

        # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤ ZIP-–∞—Ä—Ö–∏–≤
        zip_buffer = BytesIO()
        with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
            for name, content in valid_playlists:
                zip_file.writestr(name, content.encode('utf-8'))
                
        zip_buffer.seek(0)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞
        await message.answer_document(
            BufferedInputFile(
                zip_buffer.getvalue(),
                filename="valid_playlists.zip"
            ),
            caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ! –í–∞–ª–∏–¥–Ω—ã—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤: {len(valid_playlists)}"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ (health check, –∑–∞–ø—É—Å–∫) –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
