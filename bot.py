import os
import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import BufferedInputFile
from aiohttp import web
import config

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()

async def fetch_playlist(session, url):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        async with session.get(url, timeout=10) as response:
            if response.status == 200:
                return await response.text()
            return None
    except (aiohttp.ClientError, asyncio.TimeoutError) as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url}: {str(e)}")
        return None

async def check_channel(session, url):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞"""
    try:
        async with session.head(url, timeout=5) as resp:
            return resp.status == 200
    except (aiohttp.ClientError, asyncio.TimeoutError):
        return False

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É —Å–æ–±—Ä–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /playlist —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫."
    )

@dp.message(Command("playlist"))
async def get_playlist(message: types.Message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
    await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∏ –ø—Ä–æ–≤–µ—Ä—è—é –ø–ª–µ–π–ª–∏—Å—Ç—ã...")
    
    target_channels = [name.lower() for name in config.CHANNEL_NAMES]
    found_channels = []
    
    async with aiohttp.ClientSession() as session:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
        tasks = [fetch_playlist(session, url) for url in config.M3U_URLS]
        playlists = await asyncio.gather(*tasks)
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
        for playlist in filter(None, playlists):
            lines = playlist.splitlines()
            channel_info = {}
            
            for line in lines:
                line = line.strip()
                if line.startswith("#EXTINF"):
                    parts = line.split(",", 1)
                    if len(parts) > 1:
                        channel_info["title"] = parts[1].strip()
                elif line and not line.startswith("#"):
                    channel_info["url"] = line
                    if "title" in channel_info:
                        title_lower = channel_info["title"].lower()
                        if any(target in title_lower for target in target_channels):
                            found_channels.append((channel_info["title"], channel_info["url"]))
                        channel_info = {}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤
        valid_channels = []
        check_tasks = [check_channel(session, url) for _, url in found_channels]
        results = await asyncio.gather(*check_tasks)
        
        for (title, url), is_valid in zip(found_channels, results):
            if is_valid:
                valid_channels.append((title, url))
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
    if not valid_channels:
        return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–µ –∫–∞–Ω–∞–ª—ã")
    
    m3u_content = "#EXTM3U\n"
    m3u_content += "\n".join(
        f"#EXTINF:-1,{title}\n{url}"
        for title, url in valid_channels
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    file = BufferedInputFile(
        m3u_content.encode("utf-8"),
        filename="russian_channels.m3u"
    )
    await message.answer_document(
        file,
        caption=f"üé¨ –ù–∞–π–¥–µ–Ω–æ {len(valid_channels)} —Ä–∞–±–æ—á–∏—Ö –∫–∞–Ω–∞–ª–æ–≤"
    )

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
async def health_check(request):
    return web.Response(text="Bot is running")

async def start_web_app():
    app = web.Application()
    app.add_routes([web.get("/", health_check)])
    return app

async def main():
    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    web_app = await start_web_app()
    runner = web.AppRunner(web_app)
    await runner.setup()
    
    port = int(os.environ.get("PORT", 5000))
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
