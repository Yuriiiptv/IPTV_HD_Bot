import os
import json
import asyncio
import logging
import aiohttp

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import BufferedInputFile
from aiohttp import web

import gspread
from oauth2client.service_account import ServiceAccountCredentials
import config

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === Google Sheets Auth ===
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]
creds_dict = json.loads(os.environ["GOOGLE_CREDS_JSON"])
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
gc = gspread.authorize(creds)

# –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –ª–∏—Å—Ç
sheet = gc.open(config.SHEET_NAME).worksheet(config.SHEET_TAB_NAME)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()

def is_playlist_valid(lines: list[str]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ M3U –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
    return bool(lines) and lines[0].strip().lower().startswith("#extm3u") and any(line.strip().lower().startswith("#extinf") for line in lines)

async def process_playlist(url: str, session: aiohttp.ClientSession) -> tuple[str, str] | None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞:
    1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (#EXTM3U –∏ #EXTINF).
    2) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–µ—Ä–≤–æ–≥–æ –∏–ª–∏ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ—Ç–æ–∫–∞.
    3) –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ WANTED_CHANNELS: —Å–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–≤—à–∏–µ –∫–∞–Ω–∞–ª—ã.
    4) –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –µ—Å—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç; –∏–Ω–∞—á–µ None.
    """
    try:
        async with session.get(url, timeout=15) as resp:
            if resp.status != 200:
                return None

            content = await resp.text()
            lines = content.splitlines()

            # 1) –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if not is_playlist_valid(lines):
                return None

            # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–∞ –ø–æ—Ç–æ–∫–∞
            extinf_indices = [i for i, ln in enumerate(lines) if ln.lower().startswith('#extinf')]
            alive = False
            for idx in extinf_indices[:2]:
                if idx + 1 < len(lines) and lines[idx+1].startswith(('http://', 'https://')):
                    try:
                        async with session.get(lines[idx+1], timeout=10) as ch:
                            if ch.status == 200 and await ch.content.read(256):
                                alive = True
                                break
                    except:
                        pass
            if not alive:
                return None

            # 3) –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞–Ω–∞–ª–æ–≤
            valid_entries = []
            seen = set()
            for idx in extinf_indices:
                title = lines[idx].split(',', 1)[-1].strip()
                if title not in seen and any(w.lower() in title.lower() for w in config.WANTED_CHANNELS):
                    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–æ–∫–∞
                    stream = lines[idx+1] if idx+1 < len(lines) else None
                    if stream and stream.startswith(('http://','https://')):
                        try:
                            async with session.get(stream, timeout=10) as ch2:
                                if ch2.status == 200 and await ch2.content.read(256):
                                    valid_entries += [lines[idx], stream]
                                    seen.add(title)
                        except:
                            pass

            # 4) –í–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            if not valid_entries:
                return None

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∫–∞–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª
            filename = url.rstrip('/').split('/')[-1].split('?')[0]
            playlist_name = filename or 'playlist.m3u8'
            final = ['#EXTM3U'] + valid_entries
            return playlist_name, '\n'.join(final)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {url}: {e}")
        return None

@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ–≤–µ—Ä—è—é –ø–ª–µ–π–ª–∏—Å—Ç—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É—é —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /playlist, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
    )

@dp.message(Command("playlist"))
async def get_playlists(message: types.Message):
    try:
        await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∏ —Ñ–∏–ª—å—Ç—Ä—É—é –ø–ª–µ–π–ª–∏—Å—Ç—ã...")
        urls = sheet.col_values(2)[1:]
        async with aiohttp.ClientSession() as session:
            tasks = [process_playlist(u.strip(), session) for u in urls if u.strip()]
            res = await asyncio.gather(*tasks)
            valid = [r for r in res if r]

        if not valid:
            return await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤")

        cnt = 0
        for name, content in valid:
            file = BufferedInputFile(content.encode('utf-8'), filename=name)
            await message.answer_document(file, caption=f"‚úÖ {name}")
            cnt += 1
            await asyncio.sleep(1)

        await message.answer(f"üéâ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {cnt}/{len(valid)}")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# Health-check –¥–ª—è Render
async def health_check(request):
    return web.Response(text="Bot is alive!")

async def start_web_app():
    app = web.Application()
    app.add_routes([web.get("/", health_check)])
    return app

async def main():
    web_app = await start_web_app()
    runner = web.AppRunner(web_app)
    await runner.setup()
    port = int(os.environ.get('PORT', 5000))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
