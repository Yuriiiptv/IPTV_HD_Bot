import os
import json
import asyncio
import logging
import aiohttp

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import BufferedInputFile
from aiohttp import web

import gspread
from oauth2client.service_account import ServiceAccountCredentials
import re
from urllib.parse import urlparse

import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
def init_google_sheets():
    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive"
    ]
    creds_dict = json.loads(os.environ["GOOGLE_CREDS_JSON"])
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    return gspread.authorize(creds)

gc = init_google_sheets()
sheet = gc.open(config.SHEET_NAME).worksheet(config.SHEET_TAB_NAME)

# –ö–æ–º–ø–∏–ª—è—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤
channel_pattern = re.compile(
    r'^(?:' + '|'.join(re.escape(name) for name in config.WANTED_CHANNELS) + r')$',
    re.IGNORECASE
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()

def is_playlist_valid(content: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ M3U –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
    lines = content.splitlines()
    return len(lines) > 1 and lines[0].strip() == "#EXTM3U"

async def process_playlist(url: str, session: aiohttp.ClientSession) -> tuple[str, str] | None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è URL
        url = url.strip()
        if not url.startswith(('http://', 'https://')):
            return None

        async with session.get(url, timeout=20) as response:
            if response.status != 200:
                return None
                
            content = await response.text()
            
        if not is_playlist_valid(content):
            return None

        # –ü–∞—Ä—Å–∏–Ω–≥ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤
        valid_entries = []
        lines = content.splitlines()
        
        for i in range(len(lines)):
            line = lines[i].strip()
            if line.startswith("#EXTINF"):
                try:
                    title = line.split(',', 1)[1].strip()
                except IndexError:
                    continue
                
                if not channel_pattern.match(title):
                    continue
                
                if i+1 >= len(lines) or not lines[i+1].startswith('http'):
                    continue
                
                stream_url = lines[i+1].strip()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞
                try:
                    async with session.head(stream_url, timeout=10) as resp:
                        if resp.status == 200:
                            valid_entries.extend([line, stream_url])
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {stream_url}: {str(e)}")
                    continue

        if not valid_entries:
            return None
            
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        parsed_url = urlparse(url)
        filename = f"{parsed_url.netloc}_{parsed_url.path.split('/')[-1]}"[:50] + ".m3u"
        
        return filename, "\n".join(["#EXTM3U"] + valid_entries)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {url}: {str(e)}")
        return None

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üì∫ IPTV Playlist Processor\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /playlist –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤"
    )

@dp.message(Command("playlist"))
async def playlist_handler(message: types.Message):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤"""
    try:
        status_msg = await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤...")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∑ Google Sheets
        urls = sheet.col_values(2)[1:]  # –ö–æ–ª–æ–Ω–∫–∞ B, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
        valid_playlists = []
        async with aiohttp.ClientSession() as session:
            tasks = []
            for url in urls:
                if url.strip():
                    tasks.append(process_playlist(url.strip(), session))
            
            results = await asyncio.gather(*tasks)
            valid_playlists = [res for res in results if res is not None]

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if not valid_playlists:
            return await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤")
            
        success_count = 0
        for filename, content in valid_playlists:
            try:
                await message.answer_document(
                    BufferedInputFile(
                        content.encode('utf-8'),
                        filename=filename
                    ),
                    caption=f"‚úÖ {filename}"
                )
                success_count += 1
                await asyncio.sleep(0.5)  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {filename}: {str(e)}")

        await message.answer(
            f"üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}/{len(valid_playlists)} –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤"
        )

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# Web Server –¥–ª—è Render
async def health_check(request):
    return web.Response(text="Service is operational")

async def init_web_app():
    app = web.Application()
    app.add_routes([web.get('/', health_check)])
    return app

async def main():
    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    web_app = await init_web_app()
    runner = web.AppRunner(web_app)
    await runner.setup()
    
    port = int(os.environ.get("PORT", 5000))
    site = web.TCPSite(runner, host='0.0.0.0', port=port)
    await site.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
