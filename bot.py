import os
import json
import asyncio
import logging
import aiohttp

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import BufferedInputFile
from aiohttp import web

import gspread
from oauth2client.service_account import ServiceAccountCredentials
import re

import config

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === Google Sheets Auth ===
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]
creds_dict = json.loads(os.environ["GOOGLE_CREDS_JSON"])
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
gc = gspread.authorize(creds)

# –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –ª–∏—Å—Ç
sheet = gc.open(config.SHEET_NAME).worksheet(config.SHEET_TAB_NAME)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()

def is_playlist_valid(lines: list[str]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É"""
    return bool(lines) and lines[0].strip().lower().startswith("#extm3u") and any(line.strip().lower().startswith("#extinf") for line in lines)

async def process_playlist(url: str, session: aiohttp.ClientSession) -> tuple[str, str] | None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω—É–∂–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º.  
    –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ WANTED_CHANNELS, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤–µ—Å—å –ø–ª–µ–π–ª–∏—Å—Ç —Ü–µ–ª–∏–∫–æ–º."""
    try:
        async with session.get(url, timeout=15) as resp:
            if resp.status != 200:
                return None

            content = await resp.text()
            lines = content.splitlines()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            if not is_playlist_valid(lines):
                return None

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ WANTED_CHANNELS
            valid_entries = []
            seen_titles = set()
            for i, line in enumerate(lines):
                if line.lower().startswith("#extinf"):
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∑–∞–ø—è—Ç–æ–π
                    title = line.split(',', 1)[-1].strip()
                    if any(w.lower() in title.lower() for w in config.WANTED_CHANNELS) and title not in seen_titles:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π URL
                        if i + 1 < len(lines) and lines[i + 1].startswith(('http://', 'https://')):
                            stream_url = lines[i + 1]
                            try:
                                async with session.get(stream_url, timeout=10) as ch_resp:
                                    if ch_resp.status == 200:
                                        chunk = await ch_resp.content.read(256)
                                        if chunk:
                                            valid_entries.extend([line, stream_url])
                                            seen_titles.add(title)
                            except Exception as e:
                                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–∞ {stream_url}: {e}")

            # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –ø–ª–µ–π–ª–∏—Å—Ç
            final_lines = (["#EXTM3U"] + valid_entries) if valid_entries else lines
            playlist_name = url.split('/')[-1].split('?')[0] or "playlist.m3u8"
            return playlist_name, "\n".join(final_lines)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {url}: {e}")
        return None

@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ–≤–µ—Ä—è—é –ø–ª–µ–π–ª–∏—Å—Ç—ã –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –∏ —Å–æ–±–∏—Ä–∞—é –Ω—É–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /playlist ‚Äî –∏ —è –ø—Ä–∏—à–ª—é —Ñ–∞–π–ª—ã, –≤–∞–ª–∏–¥–Ω—ã–µ –∏–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ."
    )

@dp.message(Command("playlist"))
async def get_playlists(message: types.Message):
    try:
        await message.answer("‚è≥ –ò–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤...")
        urls = sheet.col_values(2)[1:]
        async with aiohttp.ClientSession() as session:
            tasks = [process_playlist(url.strip(), session) for url in urls if url.strip()]
            results = await asyncio.gather(*tasks)
            valid_playlists = [res for res in results if res]

        if not valid_playlists:
            return await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤")

        count = 0
        for name, content in valid_playlists:
            file = BufferedInputFile(content.encode('utf-8'), filename=name)
            await message.answer_document(file, caption=f"‚úÖ {name}")
            count += 1
            await asyncio.sleep(1)

        await message.answer(f"üéâ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤: {count}/{len(valid_playlists)}")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await message.answer("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# Health-check –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
async def health_check(request):
    return web.Response(text="Bot is alive!")

async def start_web_app():
    app = web.Application()
    app.add_routes([web.get("/", health_check)])
    return app

async def main():
    web_app = await start_web_app()
    runner = web.AppRunner(web_app)
    await runner.setup()
    port = int(os.environ.get('PORT', 5000))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
