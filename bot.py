import os
import json
import asyncio
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiohttp import web

import gspread
from oauth2client.service_account import ServiceAccountCredentials
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Google Sheets –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]
creds_dict = json.loads(os.environ.get("GOOGLE_CREDS_JSON", "{}"))
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
gc = gspread.authorize(creds)

# –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–∏—Å—Ç —Å URL
sheet = gc.open(config.SHEET_NAME).worksheet(config.SHEET_TAB_NAME)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ—Å—Ç–æ —Å–æ–±–∏—Ä–∞—é –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ M3U-—Å—Å—ã–ª–∫–∏ –∏–∑ Google Sheets –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –∏—Ö.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /playlist —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏."
    )

@dp.message(Command("playlist"))
async def cmd_playlist(message: types.Message):
    await message.answer("‚è≥ –°–±–æ—Ä —Å—Å—ã–ª–æ–∫‚Ä¶")
    # –°—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü B, –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏
    raw_urls = sheet.col_values(2)[1:]
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ http(s) —Å—Å—ã–ª–∫–∏ –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    seen = set()
    unique_urls = []
    for u in raw_urls:
        url = u.strip()
        if url and url.startswith(("http://", "https://")) and url not in seen:
            seen.add(url)
            unique_urls.append(url)

    if not unique_urls:
        return await message.answer("‚ùå –í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç—ã.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π URL
    for url in unique_urls:
        await message.answer(f"üîó {url}")
        await asyncio.sleep(0.1)

# Health-check —Å–µ—Ä–≤–∏—Å
async def health_check(request):
    return web.Response(text="ok")

async def start_web_app():
    app = web.Application()
    app.add_routes([web.get('/', health_check)])
    return app

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º web-—Å–µ—Ä–≤–∏—Å
    web_app = await start_web_app()
    runner = web.AppRunner(web_app)
    await runner.setup()
    port = int(os.environ.get('PORT', 5000))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
