import os
import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import BufferedInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiohttp import web
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
def get_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì∫ –ü–æ–ª—É—á–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç", callback_data="get_playlist")]
    ])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É —Å–æ–±—Ä–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫:",
        reply_markup=get_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@dp.callback_query(lambda c: c.data == "get_playlist")
async def process_playlist(callback: types.CallbackQuery):
    try:
        await callback.message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∏ –ø—Ä–æ–≤–µ—Ä—è—é –ø–ª–µ–π–ª–∏—Å—Ç—ã...")
        
        user_ip = await get_user_ip(callback.from_user.id)
        if not user_ip:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à IP –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return

        valid_channels = await check_channels(user_ip)
        
        if not valid_channels:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–µ –∫–∞–Ω–∞–ª—ã")
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ M3U —Å —É—á–µ—Ç–æ–º IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        m3u_content = "#EXTM3U\n"
        for title, url in valid_channels:
            m3u_content += f"#EXTINF:-1,{title}\n{url}\n"

        file = BufferedInputFile(
            m3u_content.encode("utf-8"),
            filename="personal_playlist.m3u"
        )
        
        await callback.message.answer_document(
            file,
            caption=f"‚úÖ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç ({len(valid_channels)} –∫–∞–Ω–∞–ª–æ–≤)\n"
                   f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å –≤–∞—à–µ–≥–æ IP: {user_ip}"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await callback.message.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()

async def get_user_ip(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–π IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get('https://api.ipify.org?format=json') as resp:
                if resp.status == 200:
                    data = await resp.json()
                    return data.get('ip', '')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP: {str(e)}")
    return ""

async def check_channels(user_ip: str) -> list:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ —Å —É—á–µ—Ç–æ–º IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    valid_channels = []
    target_channels = [name.lower() for name in config.CHANNEL_NAMES]
    
    try:
        async with aiohttp.ClientSession() as session:
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–∫—Å–∏)
            headers = {'X-Forwarded-For': user_ip, 'X-Real-IP': user_ip}
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
            playlists = []
            for url in config.M3U_URLS:
                try:
                    async with session.get(url, timeout=15, headers=headers) as resp:
                        if resp.status == 200:
                            playlists.append(await resp.text())
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {str(e)}")

            # –ü–∞—Ä—Å–∏–Ω–≥ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
            for playlist in playlists:
                lines = playlist.splitlines()
                channel_info = {}
                
                for line in lines:
                    line = line.strip()
                    if line.startswith("#EXTINF"):
                        parts = line.split(",", 1)
                        if len(parts) > 1:
                            channel_info["title"] = parts[1].strip()
                    elif line and not line.startswith("#"):
                        channel_info["url"] = line
                        if "title" in channel_info:
                            title_lower = channel_info["title"].lower()
                            if any(target in title_lower for target in target_channels):
                                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º IP
                                try:
                                    async with session.head(
                                        channel_info["url"], 
                                        timeout=10,
                                        headers=headers
                                    ) as resp:
                                        if resp.status == 200:
                                            valid_channels.append((channel_info["title"], channel_info["url"]))
                                except Exception:
                                    continue
                            channel_info = {}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: {str(e)}")
    
    return valid_channels

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
async def health_check(request):
    return web.Response(text="Bot is alive!")

async def start_web_app():
    app = web.Application()
    app.add_routes([web.get("/", health_check)])
    return app

async def main():
    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    web_app = await start_web_app()
    runner = web.AppRunner(web_app)
    await runner.setup()
    
    port = int(os.environ.get("PORT", 5000))
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
